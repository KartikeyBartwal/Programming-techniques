	1) **To find the number of perfect squares within range of (a,b), both inclusive:**
	--> return floor(sqrt(b)) - ceil(sqrt(a)) + 1 
	(from sherlock and squares)
	
	2)To make sure your index variable i doesn't  start pointing out of array index range and if reaches beyond end, 
     starts the array from the start:
  --> my_moving_index = i % len(array)
  
  3) arr1 = [10,20,30,0,40,0,50,60,0,0]. You want to remove all 0 values from the array. Here is an iteratively wrong approach:
 --->for i in range(len(arr1)):
    if arr1[i] == 0:
      arr1.remove(arr[i])
  This is wrong because everytime you delete a value in that array, you're breaking the synchronicity of for i in range(len(arr1)), as it
  won't be accurate anymore. Even a single remove like this disrupts the entire logic and absolute accuracy of the for loop.
  Instead go for this:
  ---> arr2 = []
       for i in range(len(arr1)):
       	 if arr1[i] != 0:
	    arr2.append(arr1[i])
       arr1 = arr2
       
   4) To print all the subsets of an array:
  --> def printSubsets(lst,toggles = None, i = 0):
    if toggles == None:
        toggles = [0] * len(lst)
    
    if i >= len(lst):
        subset = []
        for i in range(len(lst)):
            if toggles[i] == 1:
                subset.append(lst[i])
        print(subset)
    else:
        toggles[i] = 0
        printSubsets(lst,toggles,i+1)
        toggles[i] = 1
        printSubsets(lst,toggles,i+1)

    printSubsets([1,2,3,4,5]) 
    
    
  5)  For any sort of remainder (or left over parts), always use % (modulo) operator. It makes things way easier.
  6) To have 2 pointers in array always pointing at unique values:
  ---> for i in range(0,n):
    	 for j in range(i,n):
  7) If question involves directions and the number of directions are finite and less enough, you can just make a list which contains a 
  reference for each of the directions. E.g in a chess game, for all directions a queen generally can move:
  directions = [(1,0),(-1,0),(0,1),(0,-1),(1,1),(1,-1),(-1,-1),(-1,1)]
  
 8) If the question seems difficult, focus on solving one case scenerio at a time. Avoid trying to solve all the possible test cases all 
 at once. Take your time. Solve one kind of case, then when that is solved go for the other. Like this your probability of solving the
 question skyrockets.
   
 9) To involve 3 pointers in an arrays (like finding all triplets satisfying a given condition) in O(n^2) time complexity:
 this involves a hashmap. 
 first element from the hashmap, second from a for loop and third from linear equations in 3 variables
